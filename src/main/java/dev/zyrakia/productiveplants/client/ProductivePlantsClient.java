package dev.zyrakia.productiveplants.client;

import dev.zyrakia.productiveplants.client.config.ProductivePlantsConfig;
import dev.zyrakia.productiveplants.client.event.handler.CropSearchTickHandler;
import me.shedaniel.autoconfig.AutoConfig;
import me.shedaniel.autoconfig.serializer.GsonConfigSerializer;
import net.fabricmc.api.ClientModInitializer;
import net.fabricmc.fabric.api.client.event.lifecycle.v1.ClientTickEvents;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Client loader for this Fabric mod.
 */
public class ProductivePlantsClient implements ClientModInitializer {

	/**
	 * The human-readable name of this mod.
	 */
	public static final String MOD_NAME = "Productive Plants";

	/**
	 * The precise mod ID of this mod.
	 */
	public static final String MOD_ID = "productive-plants";

	/**
	 * The global logger used for this mod.
	 */
	public static final Logger LOGGER = LogManager.getLogger(MOD_NAME);

	/**
	 * Represents the configuration instance that will
	 * be generated by {@link AutoConfig}.
	 */
	private static ProductivePlantsConfig CONFIG;

	/**
	 * Returns the plugin configuration instance. This is unsafe
	 * to use before initialization.
	 *
	 * @return the plugin config instance.
	 */
	public static ProductivePlantsConfig getConfig() {
		return CONFIG;
	}

	@Override
	public void onInitializeClient() {
		this.setupConfig();
		ClientTickEvents.END_WORLD_TICK.register(new CropSearchTickHandler());
	}

	/**
	 * Registers the plugin config class with {@link AutoConfig} and
	 * ensures it is ready to be used throughout the plugin.
	 */
	private void setupConfig() {
		AutoConfig.register(ProductivePlantsConfig.class, GsonConfigSerializer::new);
		CONFIG = AutoConfig.getConfigHolder(ProductivePlantsConfig.class).getConfig();
	}

}
