package dev.zyrakia.productiveplants.client.config;

import dev.zyrakia.productiveplants.client.ProductivePlantsClient;
import dev.zyrakia.productiveplants.util.PlayerCommunication;
import me.shedaniel.autoconfig.ConfigData;
import me.shedaniel.autoconfig.annotation.Config;
import me.shedaniel.autoconfig.annotation.ConfigEntry;
import net.minecraft.particle.ParticleEffect;
import net.minecraft.particle.ParticleType;
import net.minecraft.registry.Registries;
import net.minecraft.text.Text;
import net.minecraft.util.Formatting;
import net.minecraft.util.Identifier;

/**
 * An automatic configuration class supported
 * and generated by {@link me.shedaniel.autoconfig.AutoConfig}.
 */
@Config.Gui.Background(Config.Gui.Background.TRANSPARENT)
@Config(name = ProductivePlantsClient.MOD_ID)
public class ProductivePlantsConfig implements ConfigData {

	/**
	 * Whether harvesting of immature plant is disabled.
	 */
	public boolean allowImmatureHarvest = false;


	/**
	 * Settings related to the plant maturity indication effect.
	 */
	@ConfigEntry.Gui.CollapsibleObject(startExpanded = true)
	public MaturityEffectSettings maturityEffect = new MaturityEffectSettings();

	/**
	 * Settings related to the plants that are observed by the mod.
	 */
	@ConfigEntry.Gui.CollapsibleObject
	public SupportedPlantSettings supportedPlants = new SupportedPlantSettings();

	/**
	 * Inner category related to toggling the different plants that
	 * this mod can support.
	 */
	public static class SupportedPlantSettings {
		/**
		 * Whether regular crops ({@link net.minecraft.block.CropBlock} extending blocks)
		 * are observed by the mod.
		 */
		@ConfigEntry.Gui.Tooltip
		public boolean regularCrops = true;

		/**
		 * Whether nether warts are observed by the mod.
		 */
		public boolean netherWarts = true;

		/**
		 * Whether attached stems ({@link net.minecraft.block.AttachedStemBlock} extending blocks)
		 * are observed by the mod.
		 */
		@ConfigEntry.Gui.Tooltip
		public boolean attachedStems = false;
	}

	/**
	 * Inner category related to the maturity indication effect.
	 */
	public static class MaturityEffectSettings {
		@ConfigEntry.Gui.Excluded
		private static final String DEFAULT_EFFECT_IDENTIFIER = "minecraft:happy_villager";

		/**
		 * Whether the maturity effect is enabled.
		 */
		public boolean effectEnabled = true;

		/**
		 * The identifier of the effect that will be used.
		 */
		private String effectIdentifier = DEFAULT_EFFECT_IDENTIFIER;

		/**
		 * Returns the currently configured effect ID cast
		 * into a {@link ParticleEffect}.
		 *
		 * @return the currently configured particle effect
		 */
		public ParticleEffect getEffect() {
			String formattedName = this.effectIdentifier.toLowerCase().replace(" ", "_");
			Identifier effectIdentifier = Identifier.tryParse(formattedName);

			if (effectIdentifier != null) {
				ParticleType<?> particleType = Registries.PARTICLE_TYPE.get(effectIdentifier);
				if (particleType instanceof ParticleEffect) {
					this.effectIdentifier = formattedName;
					return (ParticleEffect) particleType;
				}
			}

			Text errorMessage = Text.literal("").append("Effect identifier \"")
					.append(Text.literal(this.effectIdentifier).formatted(Formatting.WHITE, Formatting.BOLD))
					.append("\" is invalid and has been reset to the default value.").formatted(Formatting.GOLD);
			PlayerCommunication.sendMessage(errorMessage);

			this.effectIdentifier = DEFAULT_EFFECT_IDENTIFIER;

			return getEffect();
		}
	}

}
